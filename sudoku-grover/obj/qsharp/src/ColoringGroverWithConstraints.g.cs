//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples.ColoringGroverWithConstraints\",\"Name\":\"MeasureColor\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs\",\"Position\":{\"Item1\":19,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":23}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"register\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":25},\"Item2\":{\"Line\":1,\"Column\":33}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"ReturnType\":{\"Case\":\"Int\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" Read color from a register.\",\"\",\" # Input\",\" ## register\",\" The register of qubits to be measured.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.ColoringGroverWithConstraints\",\"Name\":\"MeasureColor\"},\"Attributes\":[],\"SourceFile\":\"/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs\",\"Position\":{\"Item1\":19,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":23}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples.ColoringGroverWithConstraints\",\"Name\":\"MeasureColoring\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs\",\"Position\":{\"Item1\":31,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":26}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"bitsPerColor\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":28},\"Item2\":{\"Line\":1,\"Column\":40}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"register\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":48},\"Item2\":{\"Line\":1,\"Column\":56}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]}]]},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" Read coloring from a register.\",\"\",\" # Input\",\" ## bitsPerColor\",\" Number of bits per color.\",\" ## register\",\" The register of qubits to be measured.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.ColoringGroverWithConstraints\",\"Name\":\"MeasureColoring\"},\"Attributes\":[],\"SourceFile\":\"/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs\",\"Position\":{\"Item1\":31,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":26}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples.ColoringGroverWithConstraints\",\"Name\":\"ApplyColorEqualityOracle\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs\",\"Position\":{\"Item1\":47,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":35}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"color0\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":15}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"color1\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":27},\"Item2\":{\"Line\":2,\"Column\":33}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"target\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":9},\"Item2\":{\"Line\":3,\"Column\":15}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" N-bit color equality oracle (no extra qubits.)\",\"\",\" # Input\",\" ## color0\",\" First color.\",\" ## color1\",\" Second color.\",\" ## target\",\" Will be flipped if colors are the same.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.ColoringGroverWithConstraints\",\"Name\":\"ApplyColorEqualityOracle\"},\"Attributes\":[],\"SourceFile\":\"/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs\",\"Position\":{\"Item1\":47,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":35}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.ColoringGroverWithConstraints\",\"Name\":\"ApplyColorEqualityOracle\"},\"Attributes\":[],\"SourceFile\":\"/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs\",\"Position\":{\"Item1\":47,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":5,\"Column\":15},\"Item2\":{\"Line\":5,\"Column\":24}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Microsoft.Quantum.Samples.ColoringGroverWithConstraints.ApplyColorEqualityOracle\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.ColoringGroverWithConstraints\",\"Name\":\"ApplyColorEqualityOracle\"},\"Attributes\":[],\"SourceFile\":\"/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs\",\"Position\":{\"Item1\":47,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":5,\"Column\":15},\"Item2\":{\"Line\":5,\"Column\":24}},\"Documentation\":[\"automatically generated QsControlled specialization for Microsoft.Quantum.Samples.ColoringGroverWithConstraints.ApplyColorEqualityOracle\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.ColoringGroverWithConstraints\",\"Name\":\"ApplyColorEqualityOracle\"},\"Attributes\":[],\"SourceFile\":\"/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs\",\"Position\":{\"Item1\":47,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":5,\"Column\":15},\"Item2\":{\"Line\":5,\"Column\":24}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for Microsoft.Quantum.Samples.ColoringGroverWithConstraints.ApplyColorEqualityOracle\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples.ColoringGroverWithConstraints\",\"Name\":\"ApplyVertexColoringOracle\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs\",\"Position\":{\"Item1\":132,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":36}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"numVertices\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":20}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"bitsPerColor\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":28},\"Item2\":{\"Line\":2,\"Column\":40}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"edges\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":48},\"Item2\":{\"Line\":2,\"Column\":53}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"startingColorConstraints\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":9},\"Item2\":{\"Line\":3,\"Column\":33}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"colorsRegister\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":4,\"Column\":9},\"Item2\":{\"Line\":4,\"Column\":23}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"target\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":5,\"Column\":9},\"Item2\":{\"Line\":5,\"Column\":15}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" Oracle for verifying vertex coloring, including color constraints from\",\" non qubit vertices.\",\"\",\" # Input\",\" ## numVertices\",\" The number of vertices in the graph.\",\" ## bitsPerColor\",\" The bits per color e.g. 2 bits per color allows for 4 colors.\",\" ## edges\",\" The array of (Vertex#,Vertex#) specifying the Vertices that can not be\",\" the same color.\",\" ## startingColorConstraints\",\" The array of (Vertex#,Color) specifying the disallowed colors for vertices.\",\"\",\" # Output\",\" A unitary operation that applies `oracle` on the target register if the control\",\" register state corresponds to the bit mask `bits`.\",\"\",\" # Example\",\" Consider the following 4x4 Sudoku puzzle\",\" ```\",\"     -----------------\",\"     |   |   | 2 | 3 |\",\"     -----------------\",\"     |   |   | 0 | 1 |\",\"     -----------------\",\"     | 1 | 2 | 3 | 0 |\",\"     -----------------\",\"     | 3 | 0 | 1 | 2 |\",\"     -----------------\",\" ```\",\"  The challenge is to fill the empty squares with numbers 0 to 3\",\"  that are unique in row, column and the top left 2x2 square.\",\"  This is a graph coloring problem where the colors are 0 to 3\",\"  and the empty cells are the vertices. The vertices can be defined as:\",\" ```\",\"     -----------------\",\"     | 0 | 1 |   |   |\",\"     -----------------\",\"     | 2 | 3 |   |   |\",\"     -----------------\",\"     |   |   |   |   |\",\"     -----------------\",\"     |   |   |   |   |\",\"     -----------------\",\" ```\",\" The graph is\",\" ```\",\"  0---1\",\"  | X |\",\"  1---2\",\" ```\",\" i.e. every vertex is connected to each other.\",\" Additionally, we require that:\",\"\",\"    - vertices 0 and 1 do not get colors 2 and 3.\",\"    - vertices 2 and 3 do not get colors 3 and 0.\",\"    - vertices 0 and 2 do not get colors 1 and 3.\",\"    - vertices 1 and 3 do not get colors 2 and 0.\",\" This results in edges (vertices that can not be same color):\",\" `edges = [(1, 0),(2, 0),(3, 0),(3, 1),(3, 2)]`\",\" This is saying that vertex 1 can not have same color as vertex 0 etc.\",\" and startingColorConstraints = [(0, 1),(0, 3),(0, 2),(1, 2),(1, 0),\",\"                    (1, 3),(2, 1),(2, 3),(2, 0),(3, 2),(3, 0),(3, 1)]\",\" This is saying that vertex 0 is not allowed to have values 1,3,2\",\" and vertex 1 is not allowed to have values 2,0,3\",\" and vertex 2 is not allowed to have values 1,3,0\",\" and vertex 3 is not allowed to have values 2,0,1\",\" A valid graph coloring solution is: [0,1,2,3]\",\" i.e. vertex 0 has color 0, vertex 1 has color 1 etc.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.ColoringGroverWithConstraints\",\"Name\":\"ApplyVertexColoringOracle\"},\"Attributes\":[],\"SourceFile\":\"/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs\",\"Position\":{\"Item1\":132,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":36}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.ColoringGroverWithConstraints\",\"Name\":\"ApplyVertexColoringOracle\"},\"Attributes\":[],\"SourceFile\":\"/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs\",\"Position\":{\"Item1\":132,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":7,\"Column\":15},\"Item2\":{\"Line\":7,\"Column\":24}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Microsoft.Quantum.Samples.ColoringGroverWithConstraints.ApplyVertexColoringOracle\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.ColoringGroverWithConstraints\",\"Name\":\"ApplyVertexColoringOracle\"},\"Attributes\":[],\"SourceFile\":\"/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs\",\"Position\":{\"Item1\":132,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":7,\"Column\":15},\"Item2\":{\"Line\":7,\"Column\":24}},\"Documentation\":[\"automatically generated QsControlled specialization for Microsoft.Quantum.Samples.ColoringGroverWithConstraints.ApplyVertexColoringOracle\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.ColoringGroverWithConstraints\",\"Name\":\"ApplyVertexColoringOracle\"},\"Attributes\":[],\"SourceFile\":\"/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs\",\"Position\":{\"Item1\":132,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":7,\"Column\":15},\"Item2\":{\"Line\":7,\"Column\":24}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for Microsoft.Quantum.Samples.ColoringGroverWithConstraints.ApplyVertexColoringOracle\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples.ColoringGroverWithConstraints\",\"Name\":\"ConstrainByEdgeAndStartingColors\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs\",\"Position\":{\"Item1\":157,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":43}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"colorsRegister\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":23}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"edges\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":35},\"Item2\":{\"Line\":2,\"Column\":40}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"startingColorConstraints\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":9},\"Item2\":{\"Line\":3,\"Column\":33}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"edgeConflictQubits\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":4,\"Column\":9},\"Item2\":{\"Line\":4,\"Column\":27}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"startingColorConflictQubits\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":4,\"Column\":39},\"Item2\":{\"Line\":4,\"Column\":66}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"bitsPerColor\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":4,\"Column\":78},\"Item2\":{\"Line\":4,\"Column\":90}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.ColoringGroverWithConstraints\",\"Name\":\"ConstrainByEdgeAndStartingColors\"},\"Attributes\":[],\"SourceFile\":\"/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs\",\"Position\":{\"Item1\":157,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":43}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.ColoringGroverWithConstraints\",\"Name\":\"ConstrainByEdgeAndStartingColors\"},\"Attributes\":[],\"SourceFile\":\"/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs\",\"Position\":{\"Item1\":157,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":6,\"Column\":15},\"Item2\":{\"Line\":6,\"Column\":24}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Microsoft.Quantum.Samples.ColoringGroverWithConstraints.ConstrainByEdgeAndStartingColors\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.ColoringGroverWithConstraints\",\"Name\":\"ConstrainByEdgeAndStartingColors\"},\"Attributes\":[],\"SourceFile\":\"/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs\",\"Position\":{\"Item1\":157,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":6,\"Column\":15},\"Item2\":{\"Line\":6,\"Column\":24}},\"Documentation\":[\"automatically generated QsControlled specialization for Microsoft.Quantum.Samples.ColoringGroverWithConstraints.ConstrainByEdgeAndStartingColors\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.ColoringGroverWithConstraints\",\"Name\":\"ConstrainByEdgeAndStartingColors\"},\"Attributes\":[],\"SourceFile\":\"/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs\",\"Position\":{\"Item1\":157,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":6,\"Column\":15},\"Item2\":{\"Line\":6,\"Column\":24}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for Microsoft.Quantum.Samples.ColoringGroverWithConstraints.ConstrainByEdgeAndStartingColors\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples.ColoringGroverWithConstraints\",\"Name\":\"ApplyVertexColoringOracle4Bit9Color\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs\",\"Position\":{\"Item1\":259,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":46}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"numVertices\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":48},\"Item2\":{\"Line\":1,\"Column\":59}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"edges\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":67},\"Item2\":{\"Line\":1,\"Column\":72}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"startingColorConstraints\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":33}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"colorsRegister\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":9},\"Item2\":{\"Line\":3,\"Column\":23}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"target\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":35},\"Item2\":{\"Line\":3,\"Column\":41}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" Oracle for verifying vertex coloring, including color constraints\",\" from non qubit vertices. This is the same as ApplyVertexColoringOracle,\",\" but hardcoded to 4 bits per color and restriction that colors are\",\" limited to 0 to 8.\",\"\",\" # Input\",\" ## numVertices\",\" The number of vertices in the graph.\",\" ## edges\",\" The array of (Vertex#,Vertex#) specifying the Vertices that can not\",\" be the same color.\",\" ## startingColorConstraints\",\" The array of (Vertex#,Color) specifying the disallowed colors for vertices.\",\" ## colorsRegister\",\" The color register.\",\" ## target\",\" The target of the operation.\",\"\",\" # Output\",\" A unitary operation that applies `oracle` on the target register if the control\",\" register state corresponds to the bit mask `bits`.\",\"\",\" # Example\",\" Consider the following 9x9 Sudoku puzzle:\",\" ```\",\"    -------------------------------------\",\"    |   | 6 | 2 | 7 | 8 | 3 | 4 | 0 | 1 |\",\"    -------------------------------------\",\"    | 8 |   | 1 | 6 | 2 | 4 | 3 | 7 | 5 |\",\"    -------------------------------------\",\"    | 7 | 3 | 4 | 5 | 0 | 1 | 8 | 6 | 2 |\",\"    -------------------------------------\",\"    | 6 | 8 | 7 | 1 | 5 | 0 | 2 | 4 | 3 |\",\"    -------------------------------------\",\"    | 4 | 1 | 5 | 3 | 6 | 2 | 7 | 8 | 0 |\",\"    -------------------------------------\",\"    | 0 | 2 | 3 | 4 | 7 | 8 | 1 | 5 | 6 |\",\"    -------------------------------------\",\"    | 3 | 5 | 8 | 0 | 1 | 7 | 6 | 2 | 4 |\",\"    -------------------------------------\",\"    | 1 | 7 | 6 | 2 | 4 | 5 | 0 | 3 | 8 |\",\"    -------------------------------------\",\"    | 2 | 4 | 0 | 8 | 3 | 6 | 5 | 1 | 7 |\",\"    -------------------------------------\",\" ```\",\"  The challenge is to fill the empty squares with numbers 0 to 8\",\"  that are unique in row, column and the top left 3x3 square\",\"  This is a graph coloring problem where the colors are 0 to 8\",\"  and the empty cells are the vertices. The vertices can be defined as\",\" ```\",\"     -----------------\",\"     | 0 |   |   |   | ...\",\"     -----------------\",\"     |   | 1 |   |   | ...\",\"     -----------------\",\"     |   |   |   |   | ...\",\"     ...\",\" ```\",\" The graph is\",\" ```\",\"     0---1\",\" ```\",\" Additionally, we also require that\",\"    - vertex 0 can not have value 6,2,7,8,3,4,0,1 (row constraint)\",\"                         or value 8,7,6,4,0,3,1,2 (col constraint)\",\"    - vertex 1 can not value 8,1,6,2,4,3,7,5 (row constraint)\",\"                    or value 6,3,8,1,2,5,7,4 (col constraint)\",\" This results in edges (vertices that can not be same color)\",\" edges = [(1, 0)]\",\" This is saying that vertex 1 can not have same color as vertex 0\",\" and startingColorConstraints = [(0, 8),(0, 7),(0, 6),(0, 4),(0, 0),(0, 3),\",\"     (0, 1),(0, 2),(1, 6),(1, 3),(1, 8),(1, 1),(1, 2),(1, 5),(1, 7),(1, 4)]\",\" The colors found must be from 0 to 8, which requires 4 bits per color.\",\" A valid graph coloring solution is: [5,0]\",\" i.e. vertex 0 has color 5, vertex 1 has color 0.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.ColoringGroverWithConstraints\",\"Name\":\"ApplyVertexColoringOracle4Bit9Color\"},\"Attributes\":[],\"SourceFile\":\"/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs\",\"Position\":{\"Item1\":259,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":46}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.ColoringGroverWithConstraints\",\"Name\":\"ApplyVertexColoringOracle4Bit9Color\"},\"Attributes\":[],\"SourceFile\":\"/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs\",\"Position\":{\"Item1\":259,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":3,\"Column\":61},\"Item2\":{\"Line\":3,\"Column\":68}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Microsoft.Quantum.Samples.ColoringGroverWithConstraints.ApplyVertexColoringOracle4Bit9Color\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.ColoringGroverWithConstraints\",\"Name\":\"ApplyVertexColoringOracle4Bit9Color\"},\"Attributes\":[],\"SourceFile\":\"/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs\",\"Position\":{\"Item1\":259,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":3,\"Column\":61},\"Item2\":{\"Line\":3,\"Column\":68}},\"Documentation\":[\"automatically generated QsControlled specialization for Microsoft.Quantum.Samples.ColoringGroverWithConstraints.ApplyVertexColoringOracle4Bit9Color\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.ColoringGroverWithConstraints\",\"Name\":\"ApplyVertexColoringOracle4Bit9Color\"},\"Attributes\":[],\"SourceFile\":\"/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs\",\"Position\":{\"Item1\":259,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":3,\"Column\":61},\"Item2\":{\"Line\":3,\"Column\":68}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for Microsoft.Quantum.Samples.ColoringGroverWithConstraints.ApplyVertexColoringOracle4Bit9Color\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples.ColoringGroverWithConstraints\",\"Name\":\"ApplyOrOracle\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs\",\"Position\":{\"Item1\":305,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"queryRegister\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":26},\"Item2\":{\"Line\":1,\"Column\":39}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"target\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":51},\"Item2\":{\"Line\":1,\"Column\":57}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" OR oracle for an arbitrary number of qubits in query register.\",\"\",\" # Inputs\",\" ## queryRegister\",\" Qubit register to query.\",\" ## target\",\" Target qubit for storing oracle result.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.ColoringGroverWithConstraints\",\"Name\":\"ApplyOrOracle\"},\"Attributes\":[],\"SourceFile\":\"/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs\",\"Position\":{\"Item1\":305,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.ColoringGroverWithConstraints\",\"Name\":\"ApplyOrOracle\"},\"Attributes\":[],\"SourceFile\":\"/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs\",\"Position\":{\"Item1\":305,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":77},\"Item2\":{\"Line\":1,\"Column\":80}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Microsoft.Quantum.Samples.ColoringGroverWithConstraints.ApplyOrOracle\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples.ColoringGroverWithConstraints\",\"Name\":\"FindColorsWithGrover\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs\",\"Position\":{\"Item1\":332,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":31}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"numVertices\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":33},\"Item2\":{\"Line\":1,\"Column\":44}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"bitsPerColor\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":52},\"Item2\":{\"Line\":1,\"Column\":64}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"maxIterations\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":72},\"Item2\":{\"Line\":1,\"Column\":85}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"oracle\"]},\"Type\":{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":15}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]}]]},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" Using Grover's search to find vertex coloring.\",\"\",\" # Input\",\" ## numVertices\",\" The number of Vertices in the graph.\",\" ## bitsPerColor\",\" The number of bits per color.\",\" ## maxIterations\",\" An estimate of the maximum iterations needed.\",\" ## oracle\",\" The Oracle used to find solution.\",\"\",\" # Output\",\" Int Array giving the color of each vertex.\",\"\",\" # Remarks\",\" See https://github.com/microsoft/QuantumKatas/tree/main/SolveSATWithGrover\",\" for original implementation in SolveSATWithGrover Kata.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.ColoringGroverWithConstraints\",\"Name\":\"FindColorsWithGrover\"},\"Attributes\":[],\"SourceFile\":\"/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs\",\"Position\":{\"Item1\":332,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":31}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples.ColoringGroverWithConstraints\",\"Name\":\"ApplyPhaseOracle\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs\",\"Position\":{\"Item1\":380,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":27}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"oracle\"]},\"Type\":{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":29},\"Item2\":{\"Line\":1,\"Column\":35}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"register\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":17}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" Grover algorithm loop\",\"\",\" # Input\",\" ## oracle\",\" The oracle which will mark the valid solutions.\",\"\",\" # Remarks\",\" See https://github.com/microsoft/QuantumKatas/tree/main/SolveSATWithGrover\",\" for the original implementation from the SolveSATWithGrover kata.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.ColoringGroverWithConstraints\",\"Name\":\"ApplyPhaseOracle\"},\"Attributes\":[],\"SourceFile\":\"/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs\",\"Position\":{\"Item1\":380,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":27}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.ColoringGroverWithConstraints\",\"Name\":\"ApplyPhaseOracle\"},\"Attributes\":[],\"SourceFile\":\"/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs\",\"Position\":{\"Item1\":380,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":4,\"Column\":15},\"Item2\":{\"Line\":4,\"Column\":18}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Microsoft.Quantum.Samples.ColoringGroverWithConstraints.ApplyPhaseOracle\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples.ColoringGroverWithConstraints\",\"Name\":\"ApplyGroversAlgorithmLoop\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs\",\"Position\":{\"Item1\":411,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":36}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"register\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":17}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"oracle\"]},\"Type\":{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":9},\"Item2\":{\"Line\":3,\"Column\":15}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"iterations\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":4,\"Column\":9},\"Item2\":{\"Line\":4,\"Column\":19}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" Grover's Algorithm loop.\",\"\",\" # Input\",\" ## register\",\" The register of qubits.\",\" ## oracle\",\" The oracle defining the solution we want.\",\" ## iterations\",\" The number of iterations to try.\",\"\",\" # Output\",\" Unitary implementing Grover's search algorithm.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.ColoringGroverWithConstraints\",\"Name\":\"ApplyGroversAlgorithmLoop\"},\"Attributes\":[],\"SourceFile\":\"/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs\",\"Position\":{\"Item1\":411,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":36}},\"Documentation\":[]}")]
#line hidden
namespace Microsoft.Quantum.Samples.ColoringGroverWithConstraints
{
    [SourceLocation("/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs", OperationFunctor.Body, 20, 32)]
    public partial class MeasureColor : Operation<IQArray<Qubit>, Int64>, ICallable
    {
        public MeasureColor(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "MeasureColor";
        String ICallable.FullName => "Microsoft.Quantum.Samples.ColoringGroverWithConstraints.MeasureColor";
        protected ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64> Microsoft__Quantum__Arithmetic__MeasureInteger
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> Microsoft__Quantum__Arithmetic__LittleEndian
        {
            get;
            set;
        }

        public override Func<IQArray<Qubit>, Int64> __Body__ => (__in__) =>
        {
            var register = __in__;
#line 21 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            return Microsoft__Quantum__Arithmetic__MeasureInteger.Apply(new Microsoft.Quantum.Arithmetic.LittleEndian(register));
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Arithmetic__MeasureInteger = this.__Factory__.Get<ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64>>(typeof(global::Microsoft.Quantum.Arithmetic.MeasureInteger));
            this.Microsoft__Quantum__Arithmetic__LittleEndian = this.__Factory__.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(global::Microsoft.Quantum.Arithmetic.LittleEndian));
        }

        public override IApplyData __DataIn__(IQArray<Qubit> data) => data;
        public override IApplyData __DataOut__(Int64 data) => new QTuple<Int64>(data);
        public static System.Threading.Tasks.Task<Int64> Run(IOperationFactory __m__, IQArray<Qubit> register)
        {
            return __m__.Run<MeasureColor, IQArray<Qubit>, Int64>(register);
        }
    }

    [SourceLocation("/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs", OperationFunctor.Body, 32, 48)]
    public partial class MeasureColoring : Operation<(Int64,IQArray<Qubit>), IQArray<Int64>>, ICallable
    {
        public MeasureColoring(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,IQArray<Qubit>)>, IApplyData
        {
            public In((Int64,IQArray<Qubit>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return ((IApplyData)Data.Item2)?.Qubits;
                }
            }
        }

        String ICallable.Name => "MeasureColoring";
        String ICallable.FullName => "Microsoft.Quantum.Samples.ColoringGroverWithConstraints.MeasureColoring";
        protected ICallable Length__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__Partitioned
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__ConstantArray
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__ForEach
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Int64> MeasureColor__
        {
            get;
            set;
        }

        public override Func<(Int64,IQArray<Qubit>), IQArray<Int64>> __Body__ => (__in__) =>
        {
            var (bitsPerColor,register) = __in__;
#line 33 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            var numVertices = (register.Length / bitsPerColor);
#line 34 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            var colorPartitions = (IQArray<IQArray<Qubit>>)Microsoft__Quantum__Arrays__Partitioned.Apply<IQArray<IQArray<Qubit>>>((Microsoft__Quantum__Arrays__ConstantArray.Apply<IQArray<Int64>>(((numVertices - 1L), bitsPerColor)), register));
#line 35 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            return Microsoft__Quantum__Arrays__ForEach.Apply<IQArray<Int64>>((MeasureColor__, colorPartitions));
        }

        ;
        public override void __Init__()
        {
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Microsoft__Quantum__Arrays__Partitioned = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.Partitioned<>));
            this.Microsoft__Quantum__Arrays__ConstantArray = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.ConstantArray<>));
            this.Microsoft__Quantum__Arrays__ForEach = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.ForEach<,>));
            this.MeasureColor__ = this.__Factory__.Get<ICallable<IQArray<Qubit>, Int64>>(typeof(MeasureColor));
        }

        public override IApplyData __DataIn__((Int64,IQArray<Qubit>) data) => new In(data);
        public override IApplyData __DataOut__(IQArray<Int64> data) => data;
        public static System.Threading.Tasks.Task<IQArray<Int64>> Run(IOperationFactory __m__, Int64 bitsPerColor, IQArray<Qubit> register)
        {
            return __m__.Run<MeasureColoring, (Int64,IQArray<Qubit>), IQArray<Int64>>((bitsPerColor, register));
        }
    }

    [SourceLocation("/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs", OperationFunctor.Body, 48, 133)]
    [SourceLocation("/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs", OperationFunctor.Adjoint, 48, 133)]
    [SourceLocation("/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs", OperationFunctor.Controlled, 48, 133)]
    [SourceLocation("/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs", OperationFunctor.ControlledAdjoint, 48, 133)]
    public partial class ApplyColorEqualityOracle : Unitary<(IQArray<Qubit>,IQArray<Qubit>,Qubit)>, ICallable
    {
        public ApplyColorEqualityOracle(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IQArray<Qubit>,Qubit)>, IApplyData
        {
            public In((IQArray<Qubit>,IQArray<Qubit>,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits, ((IApplyData)Data.Item3)?.Qubits);
                }
            }
        }

        String ICallable.Name => "ApplyColorEqualityOracle";
        String ICallable.FullName => "Microsoft.Quantum.Samples.ColoringGroverWithConstraints.ApplyColorEqualityOracle";
        protected IUnitary Microsoft__Quantum__Canon__ApplyToEachCA
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> Microsoft__Quantum__Intrinsic__CNOT
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__Zipped
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Canon__ControlledOnInt
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IQArray<Qubit>,Qubit), QVoid> __Body__ => (__in__) =>
        {
            var (color0,color1,target) = __in__;
#line 55 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            Microsoft__Quantum__Canon__ApplyToEachCA.Apply((Microsoft__Quantum__Intrinsic__CNOT, Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<(Qubit,Qubit)>>((color0, color1))));
#line 58 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            Microsoft__Quantum__Canon__ControlledOnInt.Apply<IUnitary>((0L, Microsoft__Quantum__Intrinsic__X)).Apply((color1, target));
#line 48 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            Microsoft__Quantum__Canon__ApplyToEachCA.Adjoint.Apply((Microsoft__Quantum__Intrinsic__CNOT, Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<(Qubit,Qubit)>>((color0, color1))));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,IQArray<Qubit>,Qubit), QVoid> __AdjointBody__ => (__in__) =>
        {
            var (color0,color1,target) = __in__;
#line 48 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            Microsoft__Quantum__Canon__ApplyToEachCA.Apply((Microsoft__Quantum__Intrinsic__CNOT, Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<(Qubit,Qubit)>>((color0, color1))));
#line 48 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            Microsoft__Quantum__Canon__ControlledOnInt.Apply<IUnitary>((0L, Microsoft__Quantum__Intrinsic__X)).Adjoint.Apply((color1, target));
#line 48 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            Microsoft__Quantum__Canon__ApplyToEachCA.Adjoint.Apply((Microsoft__Quantum__Intrinsic__CNOT, Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<(Qubit,Qubit)>>((color0, color1))));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<Qubit>,Qubit)), QVoid> __ControlledBody__ => (__in__) =>
        {
            var (__controlQubits__,(color0,color1,target)) = __in__;
#line 48 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            Microsoft__Quantum__Canon__ApplyToEachCA.Apply((Microsoft__Quantum__Intrinsic__CNOT, Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<(Qubit,Qubit)>>((color0, color1))));
#line 48 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            Microsoft__Quantum__Canon__ControlledOnInt.Apply<IUnitary>((0L, Microsoft__Quantum__Intrinsic__X)).Controlled.Apply((__controlQubits__, (color1, target)));
#line 48 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            Microsoft__Quantum__Canon__ApplyToEachCA.Adjoint.Apply((Microsoft__Quantum__Intrinsic__CNOT, Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<(Qubit,Qubit)>>((color0, color1))));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<Qubit>,Qubit)), QVoid> __ControlledAdjointBody__ => (__in__) =>
        {
            var (__controlQubits__,(color0,color1,target)) = __in__;
#line 48 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            Microsoft__Quantum__Canon__ApplyToEachCA.Apply((Microsoft__Quantum__Intrinsic__CNOT, Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<(Qubit,Qubit)>>((color0, color1))));
#line 48 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            Microsoft__Quantum__Canon__ControlledOnInt.Apply<IUnitary>((0L, Microsoft__Quantum__Intrinsic__X)).Adjoint.Controlled.Apply((__controlQubits__, (color1, target)));
#line 48 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            Microsoft__Quantum__Canon__ApplyToEachCA.Adjoint.Apply((Microsoft__Quantum__Intrinsic__CNOT, Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<(Qubit,Qubit)>>((color0, color1))));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Canon__ApplyToEachCA = this.__Factory__.Get<IUnitary>(typeof(global::Microsoft.Quantum.Canon.ApplyToEachCA<>));
            this.Microsoft__Quantum__Intrinsic__CNOT = this.__Factory__.Get<IUnitary<(Qubit,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.CNOT));
            this.Microsoft__Quantum__Arrays__Zipped = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.Zipped<,>));
            this.Microsoft__Quantum__Canon__ControlledOnInt = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Canon.ControlledOnInt<>));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
        }

        public override IApplyData __DataIn__((IQArray<Qubit>,IQArray<Qubit>,Qubit) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> color0, IQArray<Qubit> color1, Qubit target)
        {
            return __m__.Run<ApplyColorEqualityOracle, (IQArray<Qubit>,IQArray<Qubit>,Qubit), QVoid>((color0, color1, target));
        }
    }

    [SourceLocation("/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs", OperationFunctor.Body, 133, 158)]
    [SourceLocation("/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs", OperationFunctor.Adjoint, 133, 158)]
    [SourceLocation("/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs", OperationFunctor.Controlled, 133, 158)]
    [SourceLocation("/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs", OperationFunctor.ControlledAdjoint, 133, 158)]
    public partial class ApplyVertexColoringOracle : Unitary<(Int64,Int64,IQArray<(Int64,Int64)>,IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit)>, ICallable
    {
        public ApplyVertexColoringOracle(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64,IQArray<(Int64,Int64)>,IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit)>, IApplyData
        {
            public In((Int64,Int64,IQArray<(Int64,Int64)>,IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item5)?.Qubits, ((IApplyData)Data.Item6)?.Qubits);
                }
            }
        }

        String ICallable.Name => "ApplyVertexColoringOracle";
        String ICallable.FullName => "Microsoft.Quantum.Samples.ColoringGroverWithConstraints.ApplyVertexColoringOracle";
        protected ICallable Length__
        {
            get;
            set;
        }

        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Qubit>,IQArray<(Int64,Int64)>,IQArray<(Int64,Int64)>,IQArray<Qubit>,IQArray<Qubit>,Int64)> ConstrainByEdgeAndStartingColors__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Canon__ControlledOnInt
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        public override Func<(Int64,Int64,IQArray<(Int64,Int64)>,IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit), QVoid> __Body__ => (__in__) =>
        {
            var (numVertices,bitsPerColor,edges,startingColorConstraints,colorsRegister,target) = __in__;
#line 140 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            var nEdges = edges.Length;
#line 141 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            var nStartingColorConstraints = startingColorConstraints.Length;
#line hidden
            {
#line 145 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                var edgeConflictQubits = Allocate__.Apply(nEdges);
#line hidden
                bool __arg1__ = true;
                try
                {
#line hidden
                    {
#line 146 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                        var startingColorConflictQubits = Allocate__.Apply(nStartingColorConstraints);
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 148 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                            ConstrainByEdgeAndStartingColors__.Apply((colorsRegister, edges, startingColorConstraints, edgeConflictQubits, startingColorConflictQubits, bitsPerColor));
#line 154 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                            Microsoft__Quantum__Canon__ControlledOnInt.Apply<IUnitary>((0L, Microsoft__Quantum__Intrinsic__X)).Apply((QArray<Qubit>.Add(edgeConflictQubits, startingColorConflictQubits), target));
#line 133 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                            ConstrainByEdgeAndStartingColors__.Adjoint.Apply((colorsRegister, edges, startingColorConstraints, edgeConflictQubits, startingColorConflictQubits, bitsPerColor));
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release__.Apply(startingColorConflictQubits);
                            }
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(edgeConflictQubits);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(Int64,Int64,IQArray<(Int64,Int64)>,IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit), QVoid> __AdjointBody__ => (__in__) =>
        {
            var (numVertices,bitsPerColor,edges,startingColorConstraints,colorsRegister,target) = __in__;
#line 133 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            var __qsVar0__nEdges__ = edges.Length;
#line 133 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            var __qsVar1__nStartingColorConstraints__ = startingColorConstraints.Length;
#line 133 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            {
#line 133 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                var __qsVar2__edgeConflictQubits__ = Allocate__.Apply(__qsVar0__nEdges__);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 133 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                    {
#line 133 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                        var __qsVar3__startingColorConflictQubits__ = Allocate__.Apply(__qsVar1__nStartingColorConstraints__);
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 133 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                            ConstrainByEdgeAndStartingColors__.Apply((colorsRegister, edges, startingColorConstraints, __qsVar2__edgeConflictQubits__, __qsVar3__startingColorConflictQubits__, bitsPerColor));
#line 133 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                            Microsoft__Quantum__Canon__ControlledOnInt.Apply<IUnitary>((0L, Microsoft__Quantum__Intrinsic__X)).Adjoint.Apply((QArray<Qubit>.Add(__qsVar2__edgeConflictQubits__, __qsVar3__startingColorConflictQubits__), target));
#line 133 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                            ConstrainByEdgeAndStartingColors__.Adjoint.Apply((colorsRegister, edges, startingColorConstraints, __qsVar2__edgeConflictQubits__, __qsVar3__startingColorConflictQubits__, bitsPerColor));
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release__.Apply(__qsVar3__startingColorConflictQubits__);
                            }
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(__qsVar2__edgeConflictQubits__);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Int64,Int64,IQArray<(Int64,Int64)>,IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit)), QVoid> __ControlledBody__ => (__in__) =>
        {
            var (__controlQubits__,(numVertices,bitsPerColor,edges,startingColorConstraints,colorsRegister,target)) = __in__;
#line 133 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            var nEdges = edges.Length;
#line 133 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            var nStartingColorConstraints = startingColorConstraints.Length;
#line 133 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            {
#line 133 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                var edgeConflictQubits = Allocate__.Apply(nEdges);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 133 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                    {
#line 133 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                        var startingColorConflictQubits = Allocate__.Apply(nStartingColorConstraints);
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 133 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                            ConstrainByEdgeAndStartingColors__.Apply((colorsRegister, edges, startingColorConstraints, edgeConflictQubits, startingColorConflictQubits, bitsPerColor));
#line 133 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                            Microsoft__Quantum__Canon__ControlledOnInt.Apply<IUnitary>((0L, Microsoft__Quantum__Intrinsic__X)).Controlled.Apply((__controlQubits__, (QArray<Qubit>.Add(edgeConflictQubits, startingColorConflictQubits), target)));
#line 133 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                            ConstrainByEdgeAndStartingColors__.Adjoint.Apply((colorsRegister, edges, startingColorConstraints, edgeConflictQubits, startingColorConflictQubits, bitsPerColor));
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release__.Apply(startingColorConflictQubits);
                            }
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(edgeConflictQubits);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Int64,Int64,IQArray<(Int64,Int64)>,IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit)), QVoid> __ControlledAdjointBody__ => (__in__) =>
        {
            var (__controlQubits__,(numVertices,bitsPerColor,edges,startingColorConstraints,colorsRegister,target)) = __in__;
#line 133 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            var __qsVar0__nEdges__ = edges.Length;
#line 133 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            var __qsVar1__nStartingColorConstraints__ = startingColorConstraints.Length;
#line 133 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            {
#line 133 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                var __qsVar2__edgeConflictQubits__ = Allocate__.Apply(__qsVar0__nEdges__);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 133 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                    {
#line 133 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                        var __qsVar3__startingColorConflictQubits__ = Allocate__.Apply(__qsVar1__nStartingColorConstraints__);
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 133 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                            ConstrainByEdgeAndStartingColors__.Apply((colorsRegister, edges, startingColorConstraints, __qsVar2__edgeConflictQubits__, __qsVar3__startingColorConflictQubits__, bitsPerColor));
#line 133 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                            Microsoft__Quantum__Canon__ControlledOnInt.Apply<IUnitary>((0L, Microsoft__Quantum__Intrinsic__X)).Adjoint.Controlled.Apply((__controlQubits__, (QArray<Qubit>.Add(__qsVar2__edgeConflictQubits__, __qsVar3__startingColorConflictQubits__), target)));
#line 133 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                            ConstrainByEdgeAndStartingColors__.Adjoint.Apply((colorsRegister, edges, startingColorConstraints, __qsVar2__edgeConflictQubits__, __qsVar3__startingColorConflictQubits__, bitsPerColor));
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release__.Apply(__qsVar3__startingColorConflictQubits__);
                            }
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(__qsVar2__edgeConflictQubits__);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.ConstrainByEdgeAndStartingColors__ = this.__Factory__.Get<IUnitary<(IQArray<Qubit>,IQArray<(Int64,Int64)>,IQArray<(Int64,Int64)>,IQArray<Qubit>,IQArray<Qubit>,Int64)>>(typeof(ConstrainByEdgeAndStartingColors));
            this.Microsoft__Quantum__Canon__ControlledOnInt = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Canon.ControlledOnInt<>));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
        }

        public override IApplyData __DataIn__((Int64,Int64,IQArray<(Int64,Int64)>,IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Int64 numVertices, Int64 bitsPerColor, IQArray<(Int64,Int64)> edges, IQArray<(Int64,Int64)> startingColorConstraints, IQArray<Qubit> colorsRegister, Qubit target)
        {
            return __m__.Run<ApplyVertexColoringOracle, (Int64,Int64,IQArray<(Int64,Int64)>,IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit), QVoid>((numVertices, bitsPerColor, edges, startingColorConstraints, colorsRegister, target));
        }
    }

    [SourceLocation("/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs", OperationFunctor.Body, 158, 260)]
    [SourceLocation("/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs", OperationFunctor.Adjoint, 158, 260)]
    [SourceLocation("/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs", OperationFunctor.Controlled, 158, 260)]
    [SourceLocation("/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs", OperationFunctor.ControlledAdjoint, 158, 260)]
    public partial class ConstrainByEdgeAndStartingColors : Unitary<(IQArray<Qubit>,IQArray<(Int64,Int64)>,IQArray<(Int64,Int64)>,IQArray<Qubit>,IQArray<Qubit>,Int64)>, ICallable
    {
        public ConstrainByEdgeAndStartingColors(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IQArray<(Int64,Int64)>,IQArray<(Int64,Int64)>,IQArray<Qubit>,IQArray<Qubit>,Int64)>, IApplyData
        {
            public In((IQArray<Qubit>,IQArray<(Int64,Int64)>,IQArray<(Int64,Int64)>,IQArray<Qubit>,IQArray<Qubit>,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item4)?.Qubits, ((IApplyData)Data.Item5)?.Qubits);
                }
            }
        }

        String ICallable.Name => "ConstrainByEdgeAndStartingColors";
        String ICallable.FullName => "Microsoft.Quantum.Samples.ColoringGroverWithConstraints.ConstrainByEdgeAndStartingColors";
        protected ICallable Microsoft__Quantum__Arrays__Zipped
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Qubit>,IQArray<Qubit>,Qubit)> ApplyColorEqualityOracle__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Canon__ControlledOnInt
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected ICallable Length__
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IQArray<(Int64,Int64)>,IQArray<(Int64,Int64)>,IQArray<Qubit>,IQArray<Qubit>,Int64), QVoid> __Body__ => (__in__) =>
        {
            var (colorsRegister,edges,startingColorConstraints,edgeConflictQubits,startingColorConflictQubits,bitsPerColor) = __in__;
#line 164 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            foreach (var ((start,end),conflictQubit) in Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<((Int64,Int64),Qubit)>>((edges, edgeConflictQubits)))
#line hidden
            {
#line 168 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                ApplyColorEqualityOracle__.Apply((colorsRegister.Slice(new QRange((start * bitsPerColor), (((start + 1L) * bitsPerColor) - 1L))), colorsRegister.Slice(new QRange((end * bitsPerColor), (((end + 1L) * bitsPerColor) - 1L))), conflictQubit));
            }

#line 174 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            foreach (var ((cell,value),conflictQubit) in Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<((Int64,Int64),Qubit)>>((startingColorConstraints, startingColorConflictQubits)))
#line hidden
            {
#line 176 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                Microsoft__Quantum__Canon__ControlledOnInt.Apply<IUnitary>((value, Microsoft__Quantum__Intrinsic__X)).Apply((colorsRegister.Slice(new QRange((cell * bitsPerColor), (((cell + 1L) * bitsPerColor) - 1L))), conflictQubit));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,IQArray<(Int64,Int64)>,IQArray<(Int64,Int64)>,IQArray<Qubit>,IQArray<Qubit>,Int64), QVoid> __AdjointBody__ => (__in__) =>
        {
            var (colorsRegister,edges,startingColorConstraints,edgeConflictQubits,startingColorConflictQubits,bitsPerColor) = __in__;
#line 158 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            foreach (var ((__qsVar3__cell__,__qsVar4__value__),__qsVar5__conflictQubit__) in Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<((Int64,Int64),Qubit)>>((startingColorConstraints, startingColorConflictQubits)).Slice(new QRange((Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<((Int64,Int64),Qubit)>>((startingColorConstraints, startingColorConflictQubits)).Length - 1L), -1L, 0L)))
#line hidden
            {
#line 158 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                Microsoft__Quantum__Canon__ControlledOnInt.Apply<IUnitary>((__qsVar4__value__, Microsoft__Quantum__Intrinsic__X)).Adjoint.Apply((colorsRegister.Slice(new QRange((__qsVar3__cell__ * bitsPerColor), (((__qsVar3__cell__ + 1L) * bitsPerColor) - 1L))), __qsVar5__conflictQubit__));
            }

#line 158 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            foreach (var ((__qsVar0__start__,__qsVar1__end__),__qsVar2__conflictQubit__) in Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<((Int64,Int64),Qubit)>>((edges, edgeConflictQubits)).Slice(new QRange((Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<((Int64,Int64),Qubit)>>((edges, edgeConflictQubits)).Length - 1L), -1L, 0L)))
#line hidden
            {
#line 158 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                ApplyColorEqualityOracle__.Adjoint.Apply((colorsRegister.Slice(new QRange((__qsVar0__start__ * bitsPerColor), (((__qsVar0__start__ + 1L) * bitsPerColor) - 1L))), colorsRegister.Slice(new QRange((__qsVar1__end__ * bitsPerColor), (((__qsVar1__end__ + 1L) * bitsPerColor) - 1L))), __qsVar2__conflictQubit__));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<(Int64,Int64)>,IQArray<(Int64,Int64)>,IQArray<Qubit>,IQArray<Qubit>,Int64)), QVoid> __ControlledBody__ => (__in__) =>
        {
            var (__controlQubits__,(colorsRegister,edges,startingColorConstraints,edgeConflictQubits,startingColorConflictQubits,bitsPerColor)) = __in__;
#line 158 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            foreach (var ((start,end),conflictQubit) in Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<((Int64,Int64),Qubit)>>((edges, edgeConflictQubits)))
#line hidden
            {
#line 158 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                ApplyColorEqualityOracle__.Controlled.Apply((__controlQubits__, (colorsRegister.Slice(new QRange((start * bitsPerColor), (((start + 1L) * bitsPerColor) - 1L))), colorsRegister.Slice(new QRange((end * bitsPerColor), (((end + 1L) * bitsPerColor) - 1L))), conflictQubit)));
            }

#line 158 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            foreach (var ((cell,value),conflictQubit) in Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<((Int64,Int64),Qubit)>>((startingColorConstraints, startingColorConflictQubits)))
#line hidden
            {
#line 158 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                Microsoft__Quantum__Canon__ControlledOnInt.Apply<IUnitary>((value, Microsoft__Quantum__Intrinsic__X)).Controlled.Apply((__controlQubits__, (colorsRegister.Slice(new QRange((cell * bitsPerColor), (((cell + 1L) * bitsPerColor) - 1L))), conflictQubit)));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<(Int64,Int64)>,IQArray<(Int64,Int64)>,IQArray<Qubit>,IQArray<Qubit>,Int64)), QVoid> __ControlledAdjointBody__ => (__in__) =>
        {
            var (__controlQubits__,(colorsRegister,edges,startingColorConstraints,edgeConflictQubits,startingColorConflictQubits,bitsPerColor)) = __in__;
#line 158 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            foreach (var ((__qsVar3__cell__,__qsVar4__value__),__qsVar5__conflictQubit__) in Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<((Int64,Int64),Qubit)>>((startingColorConstraints, startingColorConflictQubits)).Slice(new QRange((Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<((Int64,Int64),Qubit)>>((startingColorConstraints, startingColorConflictQubits)).Length - 1L), -1L, 0L)))
#line hidden
            {
#line 158 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                Microsoft__Quantum__Canon__ControlledOnInt.Apply<IUnitary>((__qsVar4__value__, Microsoft__Quantum__Intrinsic__X)).Adjoint.Controlled.Apply((__controlQubits__, (colorsRegister.Slice(new QRange((__qsVar3__cell__ * bitsPerColor), (((__qsVar3__cell__ + 1L) * bitsPerColor) - 1L))), __qsVar5__conflictQubit__)));
            }

#line 158 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            foreach (var ((__qsVar0__start__,__qsVar1__end__),__qsVar2__conflictQubit__) in Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<((Int64,Int64),Qubit)>>((edges, edgeConflictQubits)).Slice(new QRange((Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<((Int64,Int64),Qubit)>>((edges, edgeConflictQubits)).Length - 1L), -1L, 0L)))
#line hidden
            {
#line 158 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                ApplyColorEqualityOracle__.Adjoint.Controlled.Apply((__controlQubits__, (colorsRegister.Slice(new QRange((__qsVar0__start__ * bitsPerColor), (((__qsVar0__start__ + 1L) * bitsPerColor) - 1L))), colorsRegister.Slice(new QRange((__qsVar1__end__ * bitsPerColor), (((__qsVar1__end__ + 1L) * bitsPerColor) - 1L))), __qsVar2__conflictQubit__)));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Arrays__Zipped = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.Zipped<,>));
            this.ApplyColorEqualityOracle__ = this.__Factory__.Get<IUnitary<(IQArray<Qubit>,IQArray<Qubit>,Qubit)>>(typeof(ApplyColorEqualityOracle));
            this.Microsoft__Quantum__Canon__ControlledOnInt = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Canon.ControlledOnInt<>));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
        }

        public override IApplyData __DataIn__((IQArray<Qubit>,IQArray<(Int64,Int64)>,IQArray<(Int64,Int64)>,IQArray<Qubit>,IQArray<Qubit>,Int64) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> colorsRegister, IQArray<(Int64,Int64)> edges, IQArray<(Int64,Int64)> startingColorConstraints, IQArray<Qubit> edgeConflictQubits, IQArray<Qubit> startingColorConflictQubits, Int64 bitsPerColor)
        {
            return __m__.Run<ConstrainByEdgeAndStartingColors, (IQArray<Qubit>,IQArray<(Int64,Int64)>,IQArray<(Int64,Int64)>,IQArray<Qubit>,IQArray<Qubit>,Int64), QVoid>((colorsRegister, edges, startingColorConstraints, edgeConflictQubits, startingColorConflictQubits, bitsPerColor));
        }
    }

    [SourceLocation("/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs", OperationFunctor.Body, 260, 306)]
    [SourceLocation("/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs", OperationFunctor.Adjoint, 260, 306)]
    [SourceLocation("/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs", OperationFunctor.Controlled, 260, 306)]
    [SourceLocation("/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs", OperationFunctor.ControlledAdjoint, 260, 306)]
    public partial class ApplyVertexColoringOracle4Bit9Color : Unitary<(Int64,IQArray<(Int64,Int64)>,IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit)>, ICallable
    {
        public ApplyVertexColoringOracle4Bit9Color(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,IQArray<(Int64,Int64)>,IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit)>, IApplyData
        {
            public In((Int64,IQArray<(Int64,Int64)>,IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item4)?.Qubits, ((IApplyData)Data.Item5)?.Qubits);
                }
            }
        }

        String ICallable.Name => "ApplyVertexColoringOracle4Bit9Color";
        String ICallable.FullName => "Microsoft.Quantum.Samples.ColoringGroverWithConstraints.ApplyVertexColoringOracle4Bit9Color";
        protected ICallable Length__
        {
            get;
            set;
        }

        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Qubit>,IQArray<(Int64,Int64)>,IQArray<(Int64,Int64)>,IQArray<Qubit>,IQArray<Qubit>,Int64)> ConstrainByEdgeAndStartingColors__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__Zipped
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__Partitioned
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__ConstantArray
        {
            get;
            set;
        }

        protected IAdjointable<(IQArray<Qubit>,Qubit)> ApplyOrOracle__
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit,Qubit)> CCNOT__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Canon__ControlledOnInt
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        public override Func<(Int64,IQArray<(Int64,Int64)>,IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit), QVoid> __Body__ => (__in__) =>
        {
            var (numVertices,edges,startingColorConstraints,colorsRegister,target) = __in__;
#line 263 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            var nEdges = edges.Length;
#line 264 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            var bitsPerColor = 4L;
#line 265 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            var nStartingColorConstraints = startingColorConstraints.Length;
#line hidden
            {
#line 269 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                var edgeConflictQubits = Allocate__.Apply(nEdges);
#line hidden
                bool __arg1__ = true;
                try
                {
#line hidden
                    {
#line 270 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                        var startingColorConflictQubits = Allocate__.Apply(nStartingColorConstraints);
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line hidden
                            {
#line 271 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                var vertexColorConflictQubits = Allocate__.Apply(numVertices);
#line hidden
                                bool __arg3__ = true;
                                try
                                {
#line 273 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                    ConstrainByEdgeAndStartingColors__.Apply((colorsRegister, edges, startingColorConstraints, edgeConflictQubits, startingColorConflictQubits, bitsPerColor));
#line 277 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                    var __qsVar0__zippedColorAndConfictQubit__ = (IQArray<(IQArray<Qubit>,Qubit)>)Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<(IQArray<Qubit>,Qubit)>>((Microsoft__Quantum__Arrays__Partitioned.Apply<IQArray<IQArray<Qubit>>>((Microsoft__Quantum__Arrays__ConstantArray.Apply<IQArray<Int64>>((numVertices, bitsPerColor)), colorsRegister)), vertexColorConflictQubits));
#line 281 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                    foreach (var (__qsVar1__color__,__qsVar2__conflictQubit__) in __qsVar0__zippedColorAndConfictQubit__)
#line hidden
                                    {
#line hidden
                                        {
#line 283 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                            var __qsVar3__tempQubit__ = Allocate__.Apply();
#line hidden
                                            bool __arg4__ = true;
                                            try
                                            {
#line 285 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                                ApplyOrOracle__.Apply((__qsVar1__color__.Slice(new QRange(0L, 2L)), __qsVar3__tempQubit__));
#line 289 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                                CCNOT__.Apply((__qsVar1__color__[3L], __qsVar3__tempQubit__, __qsVar2__conflictQubit__));
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                                ApplyOrOracle__.Adjoint.Apply((__qsVar1__color__.Slice(new QRange(0L, 2L)), __qsVar3__tempQubit__));
                                            }
#line hidden
                                            catch
                                            {
                                                __arg4__ = false;
                                                throw;
                                            }
#line hidden
                                            finally
                                            {
                                                if (__arg4__)
                                                {
#line hidden
                                                    Release__.Apply(__qsVar3__tempQubit__);
                                                }
                                            }
                                        }
                                    }

#line 294 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                    Microsoft__Quantum__Canon__ControlledOnInt.Apply<IUnitary>((0L, Microsoft__Quantum__Intrinsic__X)).Apply((QArray<Qubit>.Add(QArray<Qubit>.Add(edgeConflictQubits, startingColorConflictQubits), vertexColorConflictQubits), target));
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                    var __qsVar0____qsVar0__zippedColorAndConfictQubit____ = (IQArray<(IQArray<Qubit>,Qubit)>)Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<(IQArray<Qubit>,Qubit)>>((Microsoft__Quantum__Arrays__Partitioned.Apply<IQArray<IQArray<Qubit>>>((Microsoft__Quantum__Arrays__ConstantArray.Apply<IQArray<Int64>>((numVertices, bitsPerColor)), colorsRegister)), vertexColorConflictQubits));
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                    foreach (var (__qsVar1____qsVar1__color____,__qsVar2____qsVar2__conflictQubit____) in __qsVar0____qsVar0__zippedColorAndConfictQubit____.Slice(new QRange((__qsVar0____qsVar0__zippedColorAndConfictQubit____.Length - 1L), -1L, 0L)))
#line hidden
                                    {
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                        {
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                            var __qsVar3____qsVar3__tempQubit____ = Allocate__.Apply();
#line hidden
                                            bool __arg5__ = true;
                                            try
                                            {
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                                ApplyOrOracle__.Adjoint.Adjoint.Apply((__qsVar1____qsVar1__color____.Slice(new QRange(0L, 2L)), __qsVar3____qsVar3__tempQubit____));
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                                CCNOT__.Adjoint.Apply((__qsVar1____qsVar1__color____[3L], __qsVar3____qsVar3__tempQubit____, __qsVar2____qsVar2__conflictQubit____));
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                                ApplyOrOracle__.Adjoint.Apply((__qsVar1____qsVar1__color____.Slice(new QRange(0L, 2L)), __qsVar3____qsVar3__tempQubit____));
                                            }
#line hidden
                                            catch
                                            {
                                                __arg5__ = false;
                                                throw;
                                            }
#line hidden
                                            finally
                                            {
                                                if (__arg5__)
                                                {
#line hidden
                                                    Release__.Apply(__qsVar3____qsVar3__tempQubit____);
                                                }
                                            }
                                        }
                                    }

#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                    ConstrainByEdgeAndStartingColors__.Adjoint.Apply((colorsRegister, edges, startingColorConstraints, edgeConflictQubits, startingColorConflictQubits, bitsPerColor));
                                }
#line hidden
                                catch
                                {
                                    __arg3__ = false;
                                    throw;
                                }
#line hidden
                                finally
                                {
                                    if (__arg3__)
                                    {
#line hidden
                                        Release__.Apply(vertexColorConflictQubits);
                                    }
                                }
                            }
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release__.Apply(startingColorConflictQubits);
                            }
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(edgeConflictQubits);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(Int64,IQArray<(Int64,Int64)>,IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit), QVoid> __AdjointBody__ => (__in__) =>
        {
            var (numVertices,edges,startingColorConstraints,colorsRegister,target) = __in__;
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            var __qsVar0__nEdges__ = edges.Length;
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            var __qsVar1__bitsPerColor__ = 4L;
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            var __qsVar2__nStartingColorConstraints__ = startingColorConstraints.Length;
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            {
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                var __qsVar3__edgeConflictQubits__ = Allocate__.Apply(__qsVar0__nEdges__);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                    {
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                        var __qsVar4__startingColorConflictQubits__ = Allocate__.Apply(__qsVar2__nStartingColorConstraints__);
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                            {
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                var __qsVar5__vertexColorConflictQubits__ = Allocate__.Apply(numVertices);
#line hidden
                                bool __arg3__ = true;
                                try
                                {
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                    ConstrainByEdgeAndStartingColors__.Apply((colorsRegister, edges, startingColorConstraints, __qsVar3__edgeConflictQubits__, __qsVar4__startingColorConflictQubits__, __qsVar1__bitsPerColor__));
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                    var __qsVar0____qsVar6__zippedColorAndConfictQubit____ = (IQArray<(IQArray<Qubit>,Qubit)>)Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<(IQArray<Qubit>,Qubit)>>((Microsoft__Quantum__Arrays__Partitioned.Apply<IQArray<IQArray<Qubit>>>((Microsoft__Quantum__Arrays__ConstantArray.Apply<IQArray<Int64>>((numVertices, __qsVar1__bitsPerColor__)), colorsRegister)), __qsVar5__vertexColorConflictQubits__));
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                    foreach (var (__qsVar1____qsVar7__color____,__qsVar2____qsVar8__conflictQubit____) in __qsVar0____qsVar6__zippedColorAndConfictQubit____)
#line hidden
                                    {
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                        {
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                            var __qsVar3____qsVar9__tempQubit____ = Allocate__.Apply();
#line hidden
                                            bool __arg4__ = true;
                                            try
                                            {
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                                ApplyOrOracle__.Apply((__qsVar1____qsVar7__color____.Slice(new QRange(0L, 2L)), __qsVar3____qsVar9__tempQubit____));
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                                CCNOT__.Apply((__qsVar1____qsVar7__color____[3L], __qsVar3____qsVar9__tempQubit____, __qsVar2____qsVar8__conflictQubit____));
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                                ApplyOrOracle__.Adjoint.Apply((__qsVar1____qsVar7__color____.Slice(new QRange(0L, 2L)), __qsVar3____qsVar9__tempQubit____));
                                            }
#line hidden
                                            catch
                                            {
                                                __arg4__ = false;
                                                throw;
                                            }
#line hidden
                                            finally
                                            {
                                                if (__arg4__)
                                                {
#line hidden
                                                    Release__.Apply(__qsVar3____qsVar9__tempQubit____);
                                                }
                                            }
                                        }
                                    }

#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                    Microsoft__Quantum__Canon__ControlledOnInt.Apply<IUnitary>((0L, Microsoft__Quantum__Intrinsic__X)).Adjoint.Apply((QArray<Qubit>.Add(QArray<Qubit>.Add(__qsVar3__edgeConflictQubits__, __qsVar4__startingColorConflictQubits__), __qsVar5__vertexColorConflictQubits__), target));
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                    var __qsVar0____qsVar0____qsVar6__zippedColorAndConfictQubit______ = (IQArray<(IQArray<Qubit>,Qubit)>)Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<(IQArray<Qubit>,Qubit)>>((Microsoft__Quantum__Arrays__Partitioned.Apply<IQArray<IQArray<Qubit>>>((Microsoft__Quantum__Arrays__ConstantArray.Apply<IQArray<Int64>>((numVertices, __qsVar1__bitsPerColor__)), colorsRegister)), __qsVar5__vertexColorConflictQubits__));
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                    foreach (var (__qsVar1____qsVar1____qsVar7__color______,__qsVar2____qsVar2____qsVar8__conflictQubit______) in __qsVar0____qsVar0____qsVar6__zippedColorAndConfictQubit______.Slice(new QRange((__qsVar0____qsVar0____qsVar6__zippedColorAndConfictQubit______.Length - 1L), -1L, 0L)))
#line hidden
                                    {
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                        {
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                            var __qsVar3____qsVar3____qsVar9__tempQubit______ = Allocate__.Apply();
#line hidden
                                            bool __arg5__ = true;
                                            try
                                            {
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                                ApplyOrOracle__.Adjoint.Adjoint.Apply((__qsVar1____qsVar1____qsVar7__color______.Slice(new QRange(0L, 2L)), __qsVar3____qsVar3____qsVar9__tempQubit______));
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                                CCNOT__.Adjoint.Apply((__qsVar1____qsVar1____qsVar7__color______[3L], __qsVar3____qsVar3____qsVar9__tempQubit______, __qsVar2____qsVar2____qsVar8__conflictQubit______));
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                                ApplyOrOracle__.Adjoint.Apply((__qsVar1____qsVar1____qsVar7__color______.Slice(new QRange(0L, 2L)), __qsVar3____qsVar3____qsVar9__tempQubit______));
                                            }
#line hidden
                                            catch
                                            {
                                                __arg5__ = false;
                                                throw;
                                            }
#line hidden
                                            finally
                                            {
                                                if (__arg5__)
                                                {
#line hidden
                                                    Release__.Apply(__qsVar3____qsVar3____qsVar9__tempQubit______);
                                                }
                                            }
                                        }
                                    }

#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                    ConstrainByEdgeAndStartingColors__.Adjoint.Apply((colorsRegister, edges, startingColorConstraints, __qsVar3__edgeConflictQubits__, __qsVar4__startingColorConflictQubits__, __qsVar1__bitsPerColor__));
                                }
#line hidden
                                catch
                                {
                                    __arg3__ = false;
                                    throw;
                                }
#line hidden
                                finally
                                {
                                    if (__arg3__)
                                    {
#line hidden
                                        Release__.Apply(__qsVar5__vertexColorConflictQubits__);
                                    }
                                }
                            }
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release__.Apply(__qsVar4__startingColorConflictQubits__);
                            }
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(__qsVar3__edgeConflictQubits__);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Int64,IQArray<(Int64,Int64)>,IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit)), QVoid> __ControlledBody__ => (__in__) =>
        {
            var (__controlQubits__,(numVertices,edges,startingColorConstraints,colorsRegister,target)) = __in__;
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            var nEdges = edges.Length;
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            var bitsPerColor = 4L;
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            var nStartingColorConstraints = startingColorConstraints.Length;
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            {
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                var edgeConflictQubits = Allocate__.Apply(nEdges);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                    {
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                        var startingColorConflictQubits = Allocate__.Apply(nStartingColorConstraints);
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                            {
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                var vertexColorConflictQubits = Allocate__.Apply(numVertices);
#line hidden
                                bool __arg3__ = true;
                                try
                                {
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                    ConstrainByEdgeAndStartingColors__.Apply((colorsRegister, edges, startingColorConstraints, edgeConflictQubits, startingColorConflictQubits, bitsPerColor));
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                    var __qsVar0__zippedColorAndConfictQubit__ = (IQArray<(IQArray<Qubit>,Qubit)>)Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<(IQArray<Qubit>,Qubit)>>((Microsoft__Quantum__Arrays__Partitioned.Apply<IQArray<IQArray<Qubit>>>((Microsoft__Quantum__Arrays__ConstantArray.Apply<IQArray<Int64>>((numVertices, bitsPerColor)), colorsRegister)), vertexColorConflictQubits));
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                    foreach (var (__qsVar1__color__,__qsVar2__conflictQubit__) in __qsVar0__zippedColorAndConfictQubit__)
#line hidden
                                    {
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                        {
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                            var __qsVar3__tempQubit__ = Allocate__.Apply();
#line hidden
                                            bool __arg4__ = true;
                                            try
                                            {
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                                ApplyOrOracle__.Apply((__qsVar1__color__.Slice(new QRange(0L, 2L)), __qsVar3__tempQubit__));
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                                CCNOT__.Apply((__qsVar1__color__[3L], __qsVar3__tempQubit__, __qsVar2__conflictQubit__));
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                                ApplyOrOracle__.Adjoint.Apply((__qsVar1__color__.Slice(new QRange(0L, 2L)), __qsVar3__tempQubit__));
                                            }
#line hidden
                                            catch
                                            {
                                                __arg4__ = false;
                                                throw;
                                            }
#line hidden
                                            finally
                                            {
                                                if (__arg4__)
                                                {
#line hidden
                                                    Release__.Apply(__qsVar3__tempQubit__);
                                                }
                                            }
                                        }
                                    }

#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                    Microsoft__Quantum__Canon__ControlledOnInt.Apply<IUnitary>((0L, Microsoft__Quantum__Intrinsic__X)).Controlled.Apply((__controlQubits__, (QArray<Qubit>.Add(QArray<Qubit>.Add(edgeConflictQubits, startingColorConflictQubits), vertexColorConflictQubits), target)));
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                    var __qsVar0____qsVar0__zippedColorAndConfictQubit____ = (IQArray<(IQArray<Qubit>,Qubit)>)Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<(IQArray<Qubit>,Qubit)>>((Microsoft__Quantum__Arrays__Partitioned.Apply<IQArray<IQArray<Qubit>>>((Microsoft__Quantum__Arrays__ConstantArray.Apply<IQArray<Int64>>((numVertices, bitsPerColor)), colorsRegister)), vertexColorConflictQubits));
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                    foreach (var (__qsVar1____qsVar1__color____,__qsVar2____qsVar2__conflictQubit____) in __qsVar0____qsVar0__zippedColorAndConfictQubit____.Slice(new QRange((__qsVar0____qsVar0__zippedColorAndConfictQubit____.Length - 1L), -1L, 0L)))
#line hidden
                                    {
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                        {
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                            var __qsVar3____qsVar3__tempQubit____ = Allocate__.Apply();
#line hidden
                                            bool __arg5__ = true;
                                            try
                                            {
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                                ApplyOrOracle__.Adjoint.Adjoint.Apply((__qsVar1____qsVar1__color____.Slice(new QRange(0L, 2L)), __qsVar3____qsVar3__tempQubit____));
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                                CCNOT__.Adjoint.Apply((__qsVar1____qsVar1__color____[3L], __qsVar3____qsVar3__tempQubit____, __qsVar2____qsVar2__conflictQubit____));
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                                ApplyOrOracle__.Adjoint.Apply((__qsVar1____qsVar1__color____.Slice(new QRange(0L, 2L)), __qsVar3____qsVar3__tempQubit____));
                                            }
#line hidden
                                            catch
                                            {
                                                __arg5__ = false;
                                                throw;
                                            }
#line hidden
                                            finally
                                            {
                                                if (__arg5__)
                                                {
#line hidden
                                                    Release__.Apply(__qsVar3____qsVar3__tempQubit____);
                                                }
                                            }
                                        }
                                    }

#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                    ConstrainByEdgeAndStartingColors__.Adjoint.Apply((colorsRegister, edges, startingColorConstraints, edgeConflictQubits, startingColorConflictQubits, bitsPerColor));
                                }
#line hidden
                                catch
                                {
                                    __arg3__ = false;
                                    throw;
                                }
#line hidden
                                finally
                                {
                                    if (__arg3__)
                                    {
#line hidden
                                        Release__.Apply(vertexColorConflictQubits);
                                    }
                                }
                            }
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release__.Apply(startingColorConflictQubits);
                            }
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(edgeConflictQubits);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Int64,IQArray<(Int64,Int64)>,IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit)), QVoid> __ControlledAdjointBody__ => (__in__) =>
        {
            var (__controlQubits__,(numVertices,edges,startingColorConstraints,colorsRegister,target)) = __in__;
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            var __qsVar0__nEdges__ = edges.Length;
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            var __qsVar1__bitsPerColor__ = 4L;
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            var __qsVar2__nStartingColorConstraints__ = startingColorConstraints.Length;
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            {
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                var __qsVar3__edgeConflictQubits__ = Allocate__.Apply(__qsVar0__nEdges__);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                    {
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                        var __qsVar4__startingColorConflictQubits__ = Allocate__.Apply(__qsVar2__nStartingColorConstraints__);
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                            {
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                var __qsVar5__vertexColorConflictQubits__ = Allocate__.Apply(numVertices);
#line hidden
                                bool __arg3__ = true;
                                try
                                {
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                    ConstrainByEdgeAndStartingColors__.Apply((colorsRegister, edges, startingColorConstraints, __qsVar3__edgeConflictQubits__, __qsVar4__startingColorConflictQubits__, __qsVar1__bitsPerColor__));
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                    var __qsVar0____qsVar6__zippedColorAndConfictQubit____ = (IQArray<(IQArray<Qubit>,Qubit)>)Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<(IQArray<Qubit>,Qubit)>>((Microsoft__Quantum__Arrays__Partitioned.Apply<IQArray<IQArray<Qubit>>>((Microsoft__Quantum__Arrays__ConstantArray.Apply<IQArray<Int64>>((numVertices, __qsVar1__bitsPerColor__)), colorsRegister)), __qsVar5__vertexColorConflictQubits__));
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                    foreach (var (__qsVar1____qsVar7__color____,__qsVar2____qsVar8__conflictQubit____) in __qsVar0____qsVar6__zippedColorAndConfictQubit____)
#line hidden
                                    {
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                        {
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                            var __qsVar3____qsVar9__tempQubit____ = Allocate__.Apply();
#line hidden
                                            bool __arg4__ = true;
                                            try
                                            {
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                                ApplyOrOracle__.Apply((__qsVar1____qsVar7__color____.Slice(new QRange(0L, 2L)), __qsVar3____qsVar9__tempQubit____));
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                                CCNOT__.Apply((__qsVar1____qsVar7__color____[3L], __qsVar3____qsVar9__tempQubit____, __qsVar2____qsVar8__conflictQubit____));
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                                ApplyOrOracle__.Adjoint.Apply((__qsVar1____qsVar7__color____.Slice(new QRange(0L, 2L)), __qsVar3____qsVar9__tempQubit____));
                                            }
#line hidden
                                            catch
                                            {
                                                __arg4__ = false;
                                                throw;
                                            }
#line hidden
                                            finally
                                            {
                                                if (__arg4__)
                                                {
#line hidden
                                                    Release__.Apply(__qsVar3____qsVar9__tempQubit____);
                                                }
                                            }
                                        }
                                    }

#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                    Microsoft__Quantum__Canon__ControlledOnInt.Apply<IUnitary>((0L, Microsoft__Quantum__Intrinsic__X)).Adjoint.Controlled.Apply((__controlQubits__, (QArray<Qubit>.Add(QArray<Qubit>.Add(__qsVar3__edgeConflictQubits__, __qsVar4__startingColorConflictQubits__), __qsVar5__vertexColorConflictQubits__), target)));
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                    var __qsVar0____qsVar0____qsVar6__zippedColorAndConfictQubit______ = (IQArray<(IQArray<Qubit>,Qubit)>)Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<(IQArray<Qubit>,Qubit)>>((Microsoft__Quantum__Arrays__Partitioned.Apply<IQArray<IQArray<Qubit>>>((Microsoft__Quantum__Arrays__ConstantArray.Apply<IQArray<Int64>>((numVertices, __qsVar1__bitsPerColor__)), colorsRegister)), __qsVar5__vertexColorConflictQubits__));
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                    foreach (var (__qsVar1____qsVar1____qsVar7__color______,__qsVar2____qsVar2____qsVar8__conflictQubit______) in __qsVar0____qsVar0____qsVar6__zippedColorAndConfictQubit______.Slice(new QRange((__qsVar0____qsVar0____qsVar6__zippedColorAndConfictQubit______.Length - 1L), -1L, 0L)))
#line hidden
                                    {
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                        {
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                            var __qsVar3____qsVar3____qsVar9__tempQubit______ = Allocate__.Apply();
#line hidden
                                            bool __arg5__ = true;
                                            try
                                            {
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                                ApplyOrOracle__.Adjoint.Adjoint.Apply((__qsVar1____qsVar1____qsVar7__color______.Slice(new QRange(0L, 2L)), __qsVar3____qsVar3____qsVar9__tempQubit______));
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                                CCNOT__.Adjoint.Apply((__qsVar1____qsVar1____qsVar7__color______[3L], __qsVar3____qsVar3____qsVar9__tempQubit______, __qsVar2____qsVar2____qsVar8__conflictQubit______));
#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                                ApplyOrOracle__.Adjoint.Apply((__qsVar1____qsVar1____qsVar7__color______.Slice(new QRange(0L, 2L)), __qsVar3____qsVar3____qsVar9__tempQubit______));
                                            }
#line hidden
                                            catch
                                            {
                                                __arg5__ = false;
                                                throw;
                                            }
#line hidden
                                            finally
                                            {
                                                if (__arg5__)
                                                {
#line hidden
                                                    Release__.Apply(__qsVar3____qsVar3____qsVar9__tempQubit______);
                                                }
                                            }
                                        }
                                    }

#line 260 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                    ConstrainByEdgeAndStartingColors__.Adjoint.Apply((colorsRegister, edges, startingColorConstraints, __qsVar3__edgeConflictQubits__, __qsVar4__startingColorConflictQubits__, __qsVar1__bitsPerColor__));
                                }
#line hidden
                                catch
                                {
                                    __arg3__ = false;
                                    throw;
                                }
#line hidden
                                finally
                                {
                                    if (__arg3__)
                                    {
#line hidden
                                        Release__.Apply(__qsVar5__vertexColorConflictQubits__);
                                    }
                                }
                            }
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release__.Apply(__qsVar4__startingColorConflictQubits__);
                            }
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(__qsVar3__edgeConflictQubits__);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.ConstrainByEdgeAndStartingColors__ = this.__Factory__.Get<IUnitary<(IQArray<Qubit>,IQArray<(Int64,Int64)>,IQArray<(Int64,Int64)>,IQArray<Qubit>,IQArray<Qubit>,Int64)>>(typeof(ConstrainByEdgeAndStartingColors));
            this.Microsoft__Quantum__Arrays__Zipped = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.Zipped<,>));
            this.Microsoft__Quantum__Arrays__Partitioned = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.Partitioned<>));
            this.Microsoft__Quantum__Arrays__ConstantArray = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.ConstantArray<>));
            this.ApplyOrOracle__ = this.__Factory__.Get<IAdjointable<(IQArray<Qubit>,Qubit)>>(typeof(ApplyOrOracle));
            this.CCNOT__ = this.__Factory__.Get<IUnitary<(Qubit,Qubit,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.CCNOT));
            this.Microsoft__Quantum__Canon__ControlledOnInt = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Canon.ControlledOnInt<>));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
        }

        public override IApplyData __DataIn__((Int64,IQArray<(Int64,Int64)>,IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Int64 numVertices, IQArray<(Int64,Int64)> edges, IQArray<(Int64,Int64)> startingColorConstraints, IQArray<Qubit> colorsRegister, Qubit target)
        {
            return __m__.Run<ApplyVertexColoringOracle4Bit9Color, (Int64,IQArray<(Int64,Int64)>,IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit), QVoid>((numVertices, edges, startingColorConstraints, colorsRegister, target));
        }
    }

    [SourceLocation("/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs", OperationFunctor.Body, 306, 333)]
    [SourceLocation("/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs", OperationFunctor.Adjoint, 306, 333)]
    public partial class ApplyOrOracle : Adjointable<(IQArray<Qubit>,Qubit)>, ICallable
    {
        public ApplyOrOracle(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,Qubit)>, IApplyData
        {
            public In((IQArray<Qubit>,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits);
                }
            }
        }

        String ICallable.Name => "ApplyOrOracle";
        String ICallable.FullName => "Microsoft.Quantum.Samples.ColoringGroverWithConstraints.ApplyOrOracle";
        protected ICallable Microsoft__Quantum__Canon__ControlledOnInt
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,Qubit), QVoid> __Body__ => (__in__) =>
        {
            var (queryRegister,target) = __in__;
#line 309 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            Microsoft__Quantum__Canon__ControlledOnInt.Apply<IUnitary>((0L, Microsoft__Quantum__Intrinsic__X)).Apply((queryRegister, target));
#line 311 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            Microsoft__Quantum__Intrinsic__X.Apply(target);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,Qubit), QVoid> __AdjointBody__ => (__in__) =>
        {
            var (queryRegister,target) = __in__;
#line 306 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            Microsoft__Quantum__Intrinsic__X.Adjoint.Apply(target);
#line 306 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            Microsoft__Quantum__Canon__ControlledOnInt.Apply<IUnitary>((0L, Microsoft__Quantum__Intrinsic__X)).Adjoint.Apply((queryRegister, target));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Canon__ControlledOnInt = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Canon.ControlledOnInt<>));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
        }

        public override IApplyData __DataIn__((IQArray<Qubit>,Qubit) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> queryRegister, Qubit target)
        {
            return __m__.Run<ApplyOrOracle, (IQArray<Qubit>,Qubit), QVoid>((queryRegister, target));
        }
    }

    [SourceLocation("/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs", OperationFunctor.Body, 333, 381)]
    public partial class FindColorsWithGrover : Operation<(Int64,Int64,Int64,IAdjointable), IQArray<Int64>>, ICallable
    {
        public FindColorsWithGrover(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64,Int64,IAdjointable)>, IApplyData
        {
            public In((Int64,Int64,Int64,IAdjointable) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return ((IApplyData)Data.Item4)?.Qubits;
                }
            }
        }

        String ICallable.Name => "FindColorsWithGrover";
        String ICallable.FullName => "Microsoft.Quantum.Samples.ColoringGroverWithConstraints.FindColorsWithGrover";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> Message__
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Qubit>,IAdjointable,Int64), QVoid> ApplyGroversAlgorithmLoop__
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, IQArray<Result>> Microsoft__Quantum__Measurement__MultiM
        {
            get;
            set;
        }

        protected ICallable<Qubit, Result> Microsoft__Quantum__Measurement__MResetZ
        {
            get;
            set;
        }

        protected ICallable<(Int64,IQArray<Qubit>), IQArray<Int64>> MeasureColoring__
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> ResetAll__
        {
            get;
            set;
        }

        public override Func<(Int64,Int64,Int64,IAdjointable), IQArray<Int64>> __Body__ => (__in__) =>
        {
            var (numVertices,bitsPerColor,maxIterations,oracle) = __in__;
#line 337 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            var coloring = QArray<Int64>.Create(numVertices);
#line hidden
            {
#line 341 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                var register = Allocate__.Apply((bitsPerColor * numVertices));
#line hidden
                bool __arg1__ = true;
                try
                {
#line hidden
                    {
#line 342 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                        var output = Allocate__.Apply();
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 344 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                            var correct = false;
#line 345 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                            var iter = 1L;
#line 347 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                            while (true)
                            {
#line 348 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                Message__.Apply(String.Format("Trying search with {0} iterations...", iter));
#line 349 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                ApplyGroversAlgorithmLoop__.Apply((register, oracle, iter));
#line 350 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                var res = (IQArray<Result>)Microsoft__Quantum__Measurement__MultiM.Apply(register);
#line 353 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                oracle.Apply((register, output));
#line 354 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                if ((Microsoft__Quantum__Measurement__MResetZ.Apply(output) == Result.One))
                                {
#line 355 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                    correct = true;
#line 357 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                    coloring = new QArray<Int64>(MeasureColoring__.Apply((bitsPerColor, register)));
                                }

#line 359 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                ResetAll__.Apply(register);
                                if ((correct || (iter > maxIterations)))
                                {
                                    break;
                                }
                                else
                                {
#line 362 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                    iter = (iter + 1L);
                                }
                            }

#line 364 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                            if (!(correct))
                            {
#line 365 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                                throw new ExecutionFailException("Failed to find a coloring.");
                            }

#line 368 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                            return coloring;
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release__.Apply(output);
                            }
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(register);
                    }
                }
            }
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Message__ = this.__Factory__.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
            this.ApplyGroversAlgorithmLoop__ = this.__Factory__.Get<ICallable<(IQArray<Qubit>,IAdjointable,Int64), QVoid>>(typeof(ApplyGroversAlgorithmLoop));
            this.Microsoft__Quantum__Measurement__MultiM = this.__Factory__.Get<ICallable<IQArray<Qubit>, IQArray<Result>>>(typeof(global::Microsoft.Quantum.Measurement.MultiM));
            this.Microsoft__Quantum__Measurement__MResetZ = this.__Factory__.Get<ICallable<Qubit, Result>>(typeof(global::Microsoft.Quantum.Measurement.MResetZ));
            this.MeasureColoring__ = this.__Factory__.Get<ICallable<(Int64,IQArray<Qubit>), IQArray<Int64>>>(typeof(MeasureColoring));
            this.ResetAll__ = this.__Factory__.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.ResetAll));
        }

        public override IApplyData __DataIn__((Int64,Int64,Int64,IAdjointable) data) => new In(data);
        public override IApplyData __DataOut__(IQArray<Int64> data) => data;
        public static System.Threading.Tasks.Task<IQArray<Int64>> Run(IOperationFactory __m__, Int64 numVertices, Int64 bitsPerColor, Int64 maxIterations, IAdjointable oracle)
        {
            return __m__.Run<FindColorsWithGrover, (Int64,Int64,Int64,IAdjointable), IQArray<Int64>>((numVertices, bitsPerColor, maxIterations, oracle));
        }
    }

    [SourceLocation("/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs", OperationFunctor.Body, 381, 412)]
    [SourceLocation("/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs", OperationFunctor.Adjoint, 381, 412)]
    public partial class ApplyPhaseOracle : Adjointable<(IAdjointable,IQArray<Qubit>)>, ICallable
    {
        public ApplyPhaseOracle(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IAdjointable,IQArray<Qubit>)>, IApplyData
        {
            public In((IAdjointable,IQArray<Qubit>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits);
                }
            }
        }

        String ICallable.Name => "ApplyPhaseOracle";
        String ICallable.FullName => "Microsoft.Quantum.Samples.ColoringGroverWithConstraints.ApplyPhaseOracle";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        public override Func<(IAdjointable,IQArray<Qubit>), QVoid> __Body__ => (__in__) =>
        {
            var (oracle,register) = __in__;
#line hidden
            {
#line 385 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                var target = Allocate__.Apply();
#line hidden
                bool __arg1__ = true;
                try
                {
#line 388 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                    Microsoft__Quantum__Intrinsic__X.Apply(target);
#line 389 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                    Microsoft__Quantum__Intrinsic__H.Apply(target);
#line 394 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                    oracle.Apply((register, target));
#line 381 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                    Microsoft__Quantum__Intrinsic__H.Adjoint.Apply(target);
#line 381 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                    Microsoft__Quantum__Intrinsic__X.Adjoint.Apply(target);
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(target);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IAdjointable,IQArray<Qubit>), QVoid> __AdjointBody__ => (__in__) =>
        {
            var (oracle,register) = __in__;
#line 381 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            {
#line 381 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                var __qsVar0__target__ = Allocate__.Apply();
#line hidden
                bool __arg1__ = true;
                try
                {
#line 381 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                    Microsoft__Quantum__Intrinsic__X.Apply(__qsVar0__target__);
#line 381 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                    Microsoft__Quantum__Intrinsic__H.Apply(__qsVar0__target__);
#line 381 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                    oracle.Adjoint.Apply((register, __qsVar0__target__));
#line 381 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                    Microsoft__Quantum__Intrinsic__H.Adjoint.Apply(__qsVar0__target__);
#line 381 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                    Microsoft__Quantum__Intrinsic__X.Adjoint.Apply(__qsVar0__target__);
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(__qsVar0__target__);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
        }

        public override IApplyData __DataIn__((IAdjointable,IQArray<Qubit>) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IAdjointable oracle, IQArray<Qubit> register)
        {
            return __m__.Run<ApplyPhaseOracle, (IAdjointable,IQArray<Qubit>), QVoid>((oracle, register));
        }
    }

    [SourceLocation("/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs", OperationFunctor.Body, 412, -1)]
    public partial class ApplyGroversAlgorithmLoop : Operation<(IQArray<Qubit>,IAdjointable,Int64), QVoid>, ICallable
    {
        public ApplyGroversAlgorithmLoop(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IAdjointable,Int64)>, IApplyData
        {
            public In((IQArray<Qubit>,IAdjointable,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits);
                }
            }
        }

        String ICallable.Name => "ApplyGroversAlgorithmLoop";
        String ICallable.FullName => "Microsoft.Quantum.Samples.ColoringGroverWithConstraints.ApplyGroversAlgorithmLoop";
        protected IAdjointable<(IAdjointable,IQArray<Qubit>)> ApplyPhaseOracle__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Canon__ApplyToEach
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected IAdjointable Microsoft__Quantum__Canon__ApplyToEachA
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__Z
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__Most
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__Tail
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IAdjointable,Int64), QVoid> __Body__ => (__in__) =>
        {
            var (register,oracle,iterations) = __in__;
#line 418 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            var applyPhaseOracle = ApplyPhaseOracle__.Partial(new Func<IQArray<Qubit>, (IAdjointable,IQArray<Qubit>)>((__arg1__) => (oracle, __arg1__)));
#line 419 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__H, register));
#line 421 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
            foreach (var __arg2__ in new QRange(1L, iterations))
#line hidden
            {
#line 422 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                applyPhaseOracle.Apply(register);
#line 424 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                Microsoft__Quantum__Canon__ApplyToEachA.Apply((Microsoft__Quantum__Intrinsic__H, register));
#line 425 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                Microsoft__Quantum__Canon__ApplyToEachA.Apply((Microsoft__Quantum__Intrinsic__X, register));
#line 427 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                Microsoft__Quantum__Intrinsic__Z.Controlled.Apply((Microsoft__Quantum__Arrays__Most.Apply<IQArray<Qubit>>(register), Microsoft__Quantum__Arrays__Tail.Apply<Qubit>(register)));
#line 412 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                Microsoft__Quantum__Canon__ApplyToEachA.Adjoint.Apply((Microsoft__Quantum__Intrinsic__X, register));
#line 412 "/Users/ashwin/Desktop/idk/sudoku-grover/ColoringGroverWithConstraints.qs"
                Microsoft__Quantum__Canon__ApplyToEachA.Adjoint.Apply((Microsoft__Quantum__Intrinsic__H, register));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.ApplyPhaseOracle__ = this.__Factory__.Get<IAdjointable<(IAdjointable,IQArray<Qubit>)>>(typeof(ApplyPhaseOracle));
            this.Microsoft__Quantum__Canon__ApplyToEach = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Canon.ApplyToEach<>));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.Microsoft__Quantum__Canon__ApplyToEachA = this.__Factory__.Get<IAdjointable>(typeof(global::Microsoft.Quantum.Canon.ApplyToEachA<>));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.Microsoft__Quantum__Intrinsic__Z = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.Z));
            this.Microsoft__Quantum__Arrays__Most = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.Most<>));
            this.Microsoft__Quantum__Arrays__Tail = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.Tail<>));
        }

        public override IApplyData __DataIn__((IQArray<Qubit>,IAdjointable,Int64) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> register, IAdjointable oracle, Int64 iterations)
        {
            return __m__.Run<ApplyGroversAlgorithmLoop, (IQArray<Qubit>,IAdjointable,Int64), QVoid>((register, oracle, iterations));
        }
    }
}